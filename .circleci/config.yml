# See: https://circleci.com/blog/deploying-documentation-to-github-pages-with-continuous-integration/
version: 2.1

orbs:
  python: circleci/python@2.0.3

jobs:
  docs-build:
    executor: python/default
    environment:
      - CODECOV_TOKEN: "cb142a98-9da3-4fc9-b6b5-ed62b9809d16"
      - OMP_NUM_THREADS: 2
      - MKL_NUM_THREADS: 2
      - MINICONDA_PATH: ~/miniconda
      - CONDA_ENV_NAME: testenv
      - PYTHON_VERSION: 3.7
      - NUMPY_VERSION: 1.21.2
      - SCIPY_VERSION: 1.7.1
      - MATPLOTLIB_VERSION: 1.5.1
      - CYTHON_VERSION: 0.29.24
      - SCIKIT_LEARN_VERSION: 1.1.0
      - SCIKIT_IMAGE_VERSION: 0.12.3
    steps:
      - checkout

      # make sure pandoc is on the system
      - run: sudo apt-get update && sudo apt-get install -y pandoc

      - restore_cache:
          keys:
            - doc-min-deps-ccache-{{ .Branch }}
            - doc-min-deps-ccache
            
      - save_cache:
          key: doc-min-deps-ccache-{{ .Branch }}-{{ .BuildNum }}
          paths:
            - ~/.ccache
            - ~/.cache/pip

      - run:
          name: Install the latest version of Poetry
          command: |
            curl -sSL https://install.python-poetry.org | python3 - --version 1.3.0
            poetry --version

      - run:
          name: Set BASH_ENV
          command: |
            set -e
            sudo apt update
            sudo apt-get update
            sudo apt install -qq graphviz optipng libxft2 graphviz-dev
            echo 'set -e' >> $BASH_ENV
            echo 'export OPENBLAS_NUM_THREADS=4' >> $BASH_ENV
            echo 'export XDG_RUNTIME_DIR=/tmp/runtime-circleci' >> $BASH_ENV
            echo 'export PATH=~/.local/bin/:$PATH' >> $BASH_ENV
            echo 'export DISPLAY=:99' >> $BASH_ENV
            echo 'BASH_ENV:'
            cat $BASH_ENV
      
      - run:
          name: Install pysal dependencies
          command: |
            sudo apt install libspatialindex-dev xdg-utils

      - python/install-packages:
          pkg-manager: poetry
          cache-version: "v2" # change to clear cache
          args: "--with docs"
      
      - run:
          name: Install extra Meson build
          command: |
            poetry run pip install meson ninja meson-python Cython numpy scipy 
            poetry run pip install git+https://github.com/scientific-python/devpy
            poetry run ./dev.py build

      - run:
          name: Setup pandoc
          command: sudo apt update && sudo apt install -y pandoc optipng
          
      - run:
          name: Check poetry package versions
          command: |
            poetry --version
            poetry show

      # Look at what we have and fail early if there is some library conflict
      - run:
          name: Check installation
          command: |
            poetry run which python
            # go into a separate directory since Meson requires it
            cd docs;
            poetry run cd docs; pwd; python -c "import sklearn; sklearn.utils._show_versions.show_versions()"
            poetry run cd docs; pwd; python -c "import numpy; numpy.show_config()"
            # poetry run cd docs; pwd; python -c "import sktree;"
            cd ..;
      # poetry run LIBGL_DEBUG=verbose python -c "import matplotlib.pyplot as plt; plt.figure()"
      # Build docs
      - run:
          name: Build documentation
          command: |
            poetry run poe build_docs

      # Save the example test results
      - store_test_results:
          path: docs/_build/test-results
      - store_artifacts:
          path: docs/_build/test-results
          destination: test-results
      # Save the SG RST
      - store_artifacts:
          path: docs/auto_examples.zip
      - store_artifacts:
          path: docs/generated.zip
      # Save the outputs
      - store_artifacts:
          path: docs/_build/html/
          destination: dev
      - store_artifacts:
          path: docs/_build/html_stable/
          destination: stable
      - persist_to_workspace:
          root: docs/_build
          paths:
            - html
            - html_stable

  docs-deploy:
    docker:
      - image: node:8
    steps:
      - checkout

      - attach_workspace:
          at: docS/_build

      - restore_cache:
          keys:
            - website-cache

      - run:
          name: Install and configure dependencies
          command: |
            npm install --global gh-pages@3.0
            git config --global user.email "circle@scikit-tree.com"
            git config --global user.name "Circle Ci"

      - add_ssh_keys:
          fingerprints:
            - "d6:88:6b:a0:80:bf:14:8e:80:2e:ed:11:52:26:37:68"

      - run:
          # push built docs into the `dev` directory on the `gh-pages` branch
          name: Deploy docs to gh-pages branch
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              echo "Deploying dev docs for ${CIRCLE_BRANCH}.";
              gh-pages --dotfiles --message "doc updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./dev
            else
              echo "Deploying stable docs for ${CIRCLE_BRANCH}.";
              gh-pages --dotfiles --message "doc updates [skip ci] (${CIRCLE_BUILD_NUM})" --dist doc/_build/html --dest ./stable
            fi;

      - save_cache:
          key: website-cache
          paths:
            - ~/sktree

workflows:
  commit:
    jobs:
      - docs-build
      - docs-deploy:
          requires:
            - docs-build
          filters:
            branches:
              only:
                - main